Activity tree use cases

* Change activity parent use case

  [[]] User drags an activity in ActivityTreeView to have new parent

  [[]] Activity tree controller invokes change activity parent procedure on ActivityTreeModel

  [[]] Activity tree controller initiates the redraw of the ActivityTreeView


* Change activity parent procedure

  [[]] ActivityTreeModel calls ActivityDao.setParent method to set new parent for the activity

  [[]] ActivityTreeModel finds LazyActivityTreeNode for the old parent of the activity and removes
       a corresponding child from it.

  [[]] Old parent LazyActivityTreeNode marks itself as aggregate time invalid and makes the
       recursive invalidation call to its parent.

  [[]] ActivityTreeModel finds LazyActivityTreeNode for the new parent of the activity and adds the
       child LazyActivityTreeNode to the list of new parent's children

  [[]] New parent LazyActivityTreeNode marks itself as aggregate time invalid and makes the
       recursive invalidation call to its parent.


* Redraw of ActivityTreeView

  [[]] ActivityTreeView walks over LazyActivityTreeNodes in recursive order and draws them
       by calling getName, getAggregateTimeSpent and getTimeSpent functions.

* Call getAggregateTimeSpent on LazyActivityTreeNode

  [[]] LazyActivityTreeNode checks if it is not aggregate time valid

  [[]] For each child node it calls getAggregateTimeSpent and sums up the results as aggregateTimeSpent

  [[]] It adds its own timeSpent to the aggregateTimeSpent

  [[]] It stores and returns the aggregateTimeSpent

** Extensions

  1a. If LazyActivityTreeNode is aggregate time valid then it continues from step 3.


